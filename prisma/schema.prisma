// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Role
enum ROLE {
  PATIENT
  DOCTOR
  ADMIN
}

model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  firstName   String   @map("first_name")
  lastName    String   @map("last_name")
  role        ROLE
  phoneNumber String   @map("phone_number")
  avatar      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // address
  addresses Address[]

  // admin
  admin   Admin?
  // doctor
  doctor  Doctor?
  // patient
  patient Patient?

  @@map("users")
}

// address
model Address {
  id           String  @id @default(uuid())
  country      String
  city         String
  street       String
  region       String?
  neighborhood String?

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// doctor
model Doctor {
  id        String  @id @default(uuid())
  userId    String  @unique @map("user_id")
  position  String
  biography String?

  experiences      Experience[]
  educations       Education[]
  services         Service[]
  specializations  Specialization[]
  workingHospitals WorkingHospital[]
  available_times  AvailableTime[]
  reviews          Review[]
  posts            Post[]
  bookings         Booking[]
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Experience {
  id            String    @id @default(uuid())
  doctorId      String    @map("doctor_id")
  startDate     DateTime  @map("start_date")
  endDate       DateTime? @map("end_date")
  hospital      String
  position      String
  location      String
  hospitalImage String?   @map("hospital_image")
  doctor        Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("experiences")
}

model Education {
  id          String    @id @default(uuid())
  doctorId    String    @map("doctor_id")
  startDate   DateTime  @map("start_date")
  endDate     DateTime? @map("end_date")
  institution String
  description String
  field       String
  doctor      Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("educations")
}

model Service {
  id          String  @id @default(uuid())
  doctorId    String  @map("doctor_id")
  name        String
  description String?

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("services")
}

model Specialization {
  id          String  @id @default(uuid())
  doctorId    String  @map("doctor_id")
  name        String
  description String?

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("specializations")
}

model WorkingHospital {
  id          String   @id @default(uuid())
  doctorId    String   @map("doctor_id")
  name        String
  location    String
  images      String[]
  description String?
  address     String

  doctor         Doctor          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  availableTimes AvailableTime[]

  @@map("working_hospitals")
}

model AvailableTime {
  id                String @id @default(uuid())
  doctorId          String @map("doctor_id")
  workingHospitalId String @map("working_hospital_id")
  day               String
  price             Float

  doctor          Doctor          @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  workingHospital WorkingHospital @relation(fields: [workingHospitalId], references: [id], onDelete: Cascade)
  timeSlots       TimeSlot[]

  @@map("available_times")
}

model TimeSlot {
  id              String  @id @default(uuid())
  availableTimeId String  @map("available_time_id")
  startTime       String  @map("start_time")
  finishTime      String  @map("finish_time")
  isBooked        Boolean @default(false) @map("is_booked")

  availableTime AvailableTime @relation(fields: [availableTimeId], references: [id], onDelete: Cascade)
  booking       Booking?

  @@map("time_slots")
}

model Post {
  id          String   @id @default(uuid())
  doctorId    String   @map("doctor_id")
  images      String[]
  title       String
  description String?
  slot        String?
  createdAt   DateTime @default(now()) @map("created_at")

  doctor Doctor @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("posts")
}
// patient
model Patient {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  history  MedicalHistory[]
  family   FamilyMember[]
  bookings Booking[]
  reviews  Review[]

  @@map("patients")
}

model MedicalHistory {
  id        String   @id @default(uuid())
  patientId String   @map("patient_id")
  date      DateTime
  diagnosis String
  treatment String?
  notes     String?

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("medical_history")
}

model FamilyMember {
  id           String  @id @default(uuid())
  patientId    String  @map("patient_id")
  firstName    String  @map("first_name")
  lastName     String  @map("last_name")
  relationship String
  phoneNumber  String? @map("phone_number")

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("family_members")
}

model Booking {
  id          String   @id @default(uuid())
  patientId   String   @map("patient_id")
  doctorId    String   @map("doctor_id")
  timeSlotId  String   @unique @map("time_slot_id")
  bookingDate DateTime @default(now()) @map("booking_date")
  status      String   @default("pending")
  notes       String?

  patient  Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor   Doctor   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  timeSlot TimeSlot @relation(fields: [timeSlotId], references: [id], onDelete: Cascade)

  @@map("bookings")
}

model Review {
  id           String   @id @default(uuid())
  patientId    String   @map("patient_id")
  doctorId     String   @map("doctor_id")
  reviewedDate DateTime @default(now()) @map("reviewed_date")
  mainPurpose  String   @map("main_purpose")
  comment      String?
  stars        Int      @default(5)

  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  doctor  Doctor  @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}
